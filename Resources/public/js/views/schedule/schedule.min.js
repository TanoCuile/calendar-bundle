function initializeScheduleView(a){a.ScheduleView=Backbone.View.extend({template:"",options:{},defaults:{form:false,dayNames:{1:"Пн",2:"Вт",3:"Ср",4:"Чт",5:"Пт",6:"Сб",7:"Вс"},defaultFrom:8*60,defaultTo:22*60,schedule:null,hideForm:true,showForm:false,ownerType:1,ownerId:null},templateDayItem:'<div class="day act" rv-if="day:active">{day:dayName}<span class="time"><span class="from"><span rv-text="day:fromHour"></span>:<span rv-text="day:fromMin"></span></span> - <span class="to"><span rv-text="day:toHour"></span>:<span rv-text="day:toMin"></span></span></span></div>',templateInfo:'<div class="schedule"><div rv-each-day="schedule.model:workDays"><%= templateDayItem %></div></div>',templateWorkDayItem:'<div rv-each-day="schedule.model:workDays" class="clearfix work-day h-align" rv-class-act="day:active"><div class="fl-l checkbox-widget middle" rv-class-checked="day:active" rv-on-click="schedule.checkDay"></div><div class="day-name fl-l middle" rv-text="day:dayName" rv-on-click="schedule.checkDay"></div><div class="time fl-l"><input type="text" class="from small-area" maxlength="5" rv-value="day:formattedFromTime" rv-mask="day:fromTime" data-pattern="99:99"> -<input type="text" class="to small-area" maxlength="5" rv-value="day:formattedToTime" rv-mask="day:toTime" data-pattern="99:99"></div></div></div>',templateWorkForm:'<div class="schedule-wrapper" rv-class-long="schedule.options.showForm"><div class="form schedule"><%= templateWorkDayItem %></div></div>',templateForm:"<%= templateWorkForm %>",initialize:function(b){this.options=_.extend({},this.defaults,b);if(b.model){this.model=b.model}if(!this.model){this.model=new a.Schedule()}this.render();this.postInit()},postInit:function(){},render:function(){this.template='<div class="schedule">';_.each(this.model.get("workDays"),function(b){if(b.get("active")){this.template+='<div class="day '+(b.get("active")?"act":"disact")+'">'+this.options.dayNames[b.get("dayId")]+'<span class="time"><span class="from">'+b.get("fromHour")+":"+b.get("fromMin")+'</span> - <span class="to">'+b.get("toHour")+":"+b.get("toMin")+"</span></span></div>"}}.bind(this));this.template+="</div>";return this.template},checkDay:function(c,b){c.preventDefault(true);b.day.set("active",!b.day.get("active"))},renderForm:function(){if(this.rivets){this.rivets.unbind();this.rivets=null}_.each(this.model.get("workDays"),function(c){c.setName(this.options.dayNames[c.get("dayId")])}.bind(this));var b=_.template(this.templateForm,this);b=_.template(b,this);return b},showSchedule:function(c,b){c.preventDefault(true);b.schedule.options.hideForm=false;b.schedule.options.showForm=true},close:function(c,b){c.preventDefault(true);b.schedule.options.hideForm=true;b.schedule.options.showForm=false},save:function(c,b){c.preventDefault(true);b.schedule.saveSchedule()},saveSchedule:function(){var b=this;$.ajax({url:this.model.save_url,type:"POST",data:{schedule:this.model.toJSON()}}).success(function(c){if(c.status==1){b.options.hideForm=true;b.options.showForm=false}})}});rivets.formatters.minutes=function(b){b=""+b;return b.substr(2)};rivets.formatters.hours=function(b){b=""+b;return b.substr(0,2)}};